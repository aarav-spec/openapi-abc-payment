openapi: 3.0.3
info:
  title: ABC Integration API
  description: |
    This document outlines the APIs for the integration between the merchant platform and the abc platform.
    It serves as a guide for developers to understand the available endpoints, their functionalities,
    and how to interact with them, enabling seamless communication and data exchange for user registration,
    deposits, and withdrawals.
  version: 1.0.0

servers:
  - url: https://api.abc.com/v1
    description: abc Platform API

security:
  - ApiKeyAuth: []

paths:
  /users/register:
    post:
      tags: [User Management]
      summary: Register User
      description: Registers a new user on the abc platform, initiated by Merchant.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
            example:
              userId: "NA32589"
              jname: "タナカ ケンイチ"
              email: "john.doe@example.com"
      responses:
        '200':
          description: User registered successfully (OK)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationSuccessResponse'
              example:
                userId: "NA32589"
                ok: true
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /users/get-bank-details:
    get:
      tags: [Deposit Management]
      summary: Get Deposit Payment Details
      description: Retrieves manual bank deposit payment details from abc for display on Quadcode.
      operationId: getBankDetails
      parameters:
        - name: userId
          in: query
          required: true
          description: The Quadcode username for whom to retrieve payment details.
          schema:
            type: string
          example: "user123"
      responses:
        '200':
          description: Payment details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetailsResponse'
              example:
                userId: "NA32589"
                type: "pic/ipk"
                data:
                  口座名義: "JOHN DOE"
                  口座種別: "普通 (Futsuu) Savings/General"
                  口座番号: "1234567890"
                  銀行コード: "0149"
                  支店コード: "511"
                  銀行名: "シズオカ"
                  gstpic: "カ12345" # If its PIC otherwise null
                ok: true
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /deposits/payment-received-event:
    post:
      tags: [Deposit Management (Webhook)]
      summary: Deposit Processed Notification
      description: Receives payment confirmation notification from abc.
      operationId: receivePaymentConfirmation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentReceivedEvent'
            example:
              depositid: 12345
              userId: "NA32589"
              date: "2025-06-24T10:00:00Z"
              amount: 5000
              note: "Additional notes related to this deposit"
      responses:
        '200':
          description: Payment event received and acknowledged.
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalServerError' }

components:
  schemas:
    UserRegistrationRequest:
      type: object
      properties:
        userId:
          type: string
        jname:
          type: string
        ename:
          type: string
        email:
          type: string
          format: email
      required: [userId, email]

    UserRegistrationSuccessResponse:
      type: object
      properties:
        userId:
          type: string
        ok:
          type: boolean

    BankInfo:
      type: object
      properties:
        bankName: { type: string }
        accountName: { type: string }
        accountNumber: { type: string }
        bankCode: { type: string }
        reference: { type: string }

    PaymentDetailsResponse:
      type: object
      properties:
        userId:
          type: string
        type:
          type: string
          enum: [pic, ipk]
        pic:
          $ref: '#/components/schemas/BankInfo'
        ipk:
          $ref: '#/components/schemas/BankInfo'
        ok:
          type: boolean
      required: [userId, type, ok]

    PaymentReceivedEvent:
      type: object
      properties:
        depositid:
          type: integer
        userId:
          type: string
        date:
          type: string
          format: date-time
        amount:
          type: number
        note:
          type: string
      required: [depositid, userId, date, amount]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

  responses:
    BadRequest:
      description: Invalid input data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Invalid input"
            message: "One or more fields are missing or malformed."

    Unauthorized:
      description: Authentication credentials missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unauthorized"
            message: "Invalid API Key"

    Forbidden:
      description: Authenticated but not authorized to perform the action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Forbidden"
            message: "Access denied"

    NotFound:
      description: The requested user was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Not Found"
            message: "User not found"

    Conflict:
      description: The request could not be completed due to a conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Conflict"
            message: "User already registered"

    InternalServerError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Internal Server Error"
            message: "Please try again later"

    ServiceUnavailable:
      description: The server is temporarily unable to handle the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Service Unavailable"
            message: "Server undergoing maintenance"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key for authentication.
